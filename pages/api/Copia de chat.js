// pages/api/chat.js

import { getCalendarClient } from '@/lib/google';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const MODEL = process.env.OPENAI_MODEL || 'gpt-4o';
const CHILE_UTC_OFFSET_HOURS = -4; 
const MAX_SUGGESTIONS = 5; 
const DAYS_TO_QUERY_CALENDAR = 7; 
const MAX_DAYS_FOR_USER_REQUEST = 21; 

function convertChileTimeToUtc(baseDateUtcDay, chileHour, chileMinute) {
  let utcHour = chileHour - CHILE_UTC_OFFSET_HOURS;
  const newUtcDate = new Date(baseDateUtcDay);
  newUtcDate.setUTCHours(utcHour, chileMinute, 0, 0);
  return newUtcDate;
}

function getDayIdentifier(dateObj, timeZone) {
  return new Intl.DateTimeFormat('en-CA', {
    year: 'numeric', month: '2-digit', day: '2-digit',
    timeZone: timeZone
  }).format(dateObj);
}

export default async function handler(req, res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'M√©todo no permitido' });

  const { message } = req.body;
  if (!message) return res.status(400).json({ error: 'Falta el mensaje del usuario' });

  try {
    console.log('üì® Mensaje recibido:', message);
    const lowerMessage = message.toLowerCase();

    // ***** CALENDAR KEYWORDS ACTUALIZADAS *****
    const calendarKeywords = [
      'hora', 'turno', 'disponibilidad', 'agenda', 'cuando', 'horario', 
      'disponible', 'libre', 'atiendes', 'ver', 'revisar', 'chequear', 'consultar',
      'lunes', 'martes', 'miercoles', 'mi√©rcoles', 'jueves', 'viernes', 'sabado', 's√°bado', 'domingo',
      'hoy', 'ma√±ana', 
      'tarde', 
      'a las', 
      'para el', 
      'tienes algo', 
      'hay espacio', 
      'agendar', 'agendamiento',
      'proxima semana', 'pr√≥xima semana', 'prixima semana', 'procsima semana', 'proxima semama', // Variaciones de "pr√≥xima semana"
      'proximo', 'pr√≥ximo', 'priximo', 'procsimo' // Variaciones de "pr√≥ximo"
    ];
    const isCalendarQuery = calendarKeywords.some(keyword => lowerMessage.includes(keyword));
    // ***** FIN CALENDAR KEYWORDS ACTUALIZADAS *****

    const scheduleFooterMessage = `\n\nRecuerda que puedo revisar horarios para los pr√≥ximos ${DAYS_TO_QUERY_CALENDAR} d√≠as aproximadamente desde la fecha que me indiques. Para fechas m√°s lejanas o cualquier otra duda, ¬°escr√≠benos por WhatsApp al üëâ +56 9 8996 7350 y te ayudamos con m√°s detalle! üòä`;

    if (isCalendarQuery) {
      console.log('‚è≥ Detectada consulta de calendario');
      const calendar = await getCalendarClient();
      const serverNowUtc = new Date();

      let targetDateForDisplay = null; 
      let targetHourChile = null;
      let targetMinuteChile = 0;
      let timeOfDay = null;

      const currentYearChile = parseInt(new Intl.DateTimeFormat('en-US', { year: 'numeric', timeZone: 'America/Santiago' }).format(serverNowUtc), 10);
      const currentMonthChile = parseInt(new Intl.DateTimeFormat('en-US', { month: 'numeric', timeZone: 'America/Santiago' }).format(serverNowUtc), 10) -1; 
      const currentDayOfMonthChile = parseInt(new Intl.DateTimeFormat('en-US', { day: 'numeric', timeZone: 'America/Santiago' }).format(serverNowUtc), 10);
      
      const todayChile0000UtcTimestamp = Date.UTC(currentYearChile, currentMonthChile, currentDayOfMonthChile, 0 - CHILE_UTC_OFFSET_HOURS, 0, 0, 0);
      const refDateForTargetCalc = new Date(todayChile0000UtcTimestamp);
      const actualCurrentDayOfWeekInChile = refDateForTargetCalc.getUTCDay();
      
      const isProximoQuery = lowerMessage.includes('proximo') || lowerMessage.includes('pr√≥ximo') || lowerMessage.includes('priximo') || lowerMessage.includes('procsimo');
      const isAnyNextWeekIndicator = lowerMessage.includes('proxima semana') || lowerMessage.includes('pr√≥xima semana') || lowerMessage.includes('prixima semana') || lowerMessage.includes('procsima semana') || lowerMessage.includes('proxima semama');

      let specificDayKeywordIndex = -1;
      const dayKeywordsList = [ 
        { keyword: 'domingo', index: 0 }, { keyword: 'lunes', index: 1 }, 
        { keyword: 'martes', index: 2 }, { keyword: 'miercoles', index: 3 }, 
        { keyword: 'mi√©rcoles', index: 3 }, { keyword: 'jueves', index: 4 }, 
        { keyword: 'viernes', index: 5 }, { keyword: 'sabado', index: 6 }, { keyword: 's√°bado', index: 6 }
      ];

      for (const dayInfo of dayKeywordsList) {
        if (lowerMessage.includes(dayInfo.keyword)) {
          specificDayKeywordIndex = dayInfo.index;
          break;
        }
      }
      
      // ***** L√ìGICA DE FECHA OBJETIVO REFINADA *****
      if (lowerMessage.includes('hoy')) {
        targetDateForDisplay = new Date(refDateForTargetCalc);
      } else if (lowerMessage.includes('ma√±ana') && !lowerMessage.includes('pasado ma√±ana')) {
        targetDateForDisplay = new Date(refDateForTargetCalc);
        targetDateForDisplay.setUTCDate(targetDateForDisplay.getUTCDate() + 1);
      } else if (specificDayKeywordIndex !== -1) { // Si se mencion√≥ un d√≠a de la semana
        targetDateForDisplay = new Date(refDateForTargetCalc); // Partir de hoy (Chile 00:00 UTC equiv)
        let daysToAdd = specificDayKeywordIndex - actualCurrentDayOfWeekInChile;

        if (daysToAdd < 0) { 
          daysToAdd += 7; 
        }
        
        // Si se pide expl√≠citamente "pr√≥xima semana" Y el d√≠a calculado a√∫n est√° en esta semana (daysToAdd < 7),
        // O si se pide "pr√≥ximo [d√≠a de hoy]" (daysToAdd === 0 && isProximoQuery)
        // entonces forzar el salto a la semana siguiente.
        if ((isAnyNextWeekIndicator && daysToAdd < 7) || (daysToAdd === 0 && isProximoQuery)) {
          daysToAdd += 7;
        } else if (daysToAdd === 0 && !isProximoQuery && serverNowUtc.getUTCHours() >= (19 - CHILE_UTC_OFFSET_HOURS)) {
          // Si es hoy, no se pidi√≥ "pr√≥ximo", y ya es tarde para ese d√≠a, ir a la pr√≥xima semana.
          daysToAdd += 7;
        }
        targetDateForDisplay.setUTCDate(targetDateForDisplay.getUTCDate() + daysToAdd);
      } else if (isAnyNextWeekIndicator) { // "pr√≥xima semana" gen√©rico, sin d√≠a espec√≠fico
          targetDateForDisplay = new Date(refDateForTargetCalc);
          let daysUntilNextMonday = (1 - actualCurrentDayOfWeekInChile + 7) % 7;
          if (daysUntilNextMonday === 0) daysUntilNextMonday = 7; 
          targetDateForDisplay.setUTCDate(targetDateForDisplay.getUTCDate() + daysUntilNextMonday); 
      }
      // Si targetDateForDisplay sigue null, la b√∫squeda ser√° gen√©rica desde hoy.
      // ***** FIN L√ìGICA DE FECHA OBJETIVO REFINADA *****


      if (targetDateForDisplay) {
        console.log(`üéØ Fecha Objetivo (para mostrar y filtrar): ${new Intl.DateTimeFormat('es-CL', { dateStyle: 'full', timeZone: 'America/Santiago' }).format(targetDateForDisplay)} (UTC: ${targetDateForDisplay.toISOString()})`);
        const futureLimitCheckDate = new Date(refDateForTargetCalc); // Comparamos desde el inicio del d√≠a de hoy en Chile
        futureLimitCheckDate.setUTCDate(futureLimitCheckDate.getUTCDate() + MAX_DAYS_FOR_USER_REQUEST);

        if (targetDateForDisplay >= futureLimitCheckDate) {
            const formattedDateAsked = new Intl.DateTimeFormat('es-CL', { dateStyle: 'long', timeZone: 'America/Santiago' }).format(targetDateForDisplay);
            let reply = `¬°Entiendo que buscas para el ${formattedDateAsked}! üòä Por ahora, mi calendario mental llega hasta unos ${MAX_DAYS_FOR_USER_REQUEST} d√≠as en el futuro (aprox. ${Math.floor(MAX_DAYS_FOR_USER_REQUEST / 7)} semanas).`;
            console.log('‚úÖ Respuesta generada (fecha demasiado lejana):', reply);
            // No retornamos aqu√≠, dejamos que la b√∫squeda proceda y si no encuentra nada, el footer se a√±ade abajo.
            // O mejor, s√≠ retornamos para ser expl√≠citos.
            return res.status(200).json({ response: reply + scheduleFooterMessage });
        }
      }
      
      const targetDateIdentifierForSlotFilter = targetDateForDisplay ? getDayIdentifier(targetDateForDisplay, 'America/Santiago') : null;
      // ... (El resto del c√≥digo se mantiene igual que en la respuesta #44, que gener√≥ los logs correctos para Jueves y Viernes)
      // ... Copia desde aqu√≠ (l√≠nea de "if(targetDateIdentifierForSlotFilter) console.log(...)")
      // ... hasta el final del bloque "if (isCalendarQuery)" de la respuesta #44.
      // ... La parte de OpenAI y el catch final tambi√©n se mantienen.
      // INICIO DE LA L√ìGICA QUE SE MANTIENE (DE RESPUESTA #44)
      if(targetDateIdentifierForSlotFilter) console.log(`üè∑Ô∏è Identificador de Fecha para Filtro de Slots (Chile YAML-MM-DD): ${targetDateIdentifierForSlotFilter}`);
      
      const timeMatch = lowerMessage.match(/(\d{1,2})\s*(:(00|30|15|45))?\s*(pm|am|h|hr|hrs)?/i);
      if (timeMatch) {
        let hour = parseInt(timeMatch[1], 10);
        targetMinuteChile = timeMatch[3] ? parseInt(timeMatch[3], 10) : 0; 
        const isPm = timeMatch[4] && timeMatch[4].toLowerCase() === 'pm';
        const isAm = timeMatch[4] && timeMatch[4].toLowerCase() === 'am';
        if (isPm && hour >= 1 && hour <= 11) hour += 12;
        if (isAm && hour === 12) hour = 0; 
        targetHourChile = hour;
        if (targetMinuteChile > 0 && targetMinuteChile < 30) targetMinuteChile = 0;
        else if (targetMinuteChile > 30 && targetMinuteChile < 60) targetMinuteChile = 30;
        console.log(`‚è∞ Hora objetivo (Chile): ${targetHourChile}:${targetMinuteChile.toString().padStart(2,'0')}`);
      }
      if (!targetHourChile && !isAnyNextWeekIndicator && !isProximoQuery && !(targetDateForDisplay && targetDateForDisplay > refDateForTargetCalc) ) { 
        if ((lowerMessage.includes('ma√±ana') && !lowerMessage.includes('pasado ma√±ana'))) {
             if (targetDateForDisplay && getDayIdentifier(targetDateForDisplay, 'America/Santiago') === getDayIdentifier(new Date(refDateForTargetCalc.getTime() + 24*60*60*1000), 'America/Santiago')) {
                timeOfDay = 'morning';
             }
        } else if (lowerMessage.includes('tarde')) {
            timeOfDay = 'afternoon';
        }
        if(timeOfDay) console.log(`üïí Franja horaria: ${timeOfDay}`);
      }
      
      const WORKING_HOURS_CHILE_NUMERIC = [10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 15, 15.5, 16, 16.5, 17, 17.5, 18, 18.5, 19, 19.5];
      if (targetHourChile !== null) {
        const requestedTimeNumeric = targetHourChile + (targetMinuteChile / 60);
        if (!WORKING_HOURS_CHILE_NUMERIC.includes(requestedTimeNumeric) || requestedTimeNumeric < 10 || requestedTimeNumeric > 19.5) {
            let reply = `¬°Ojo! üëÄ Parece que las ${targetHourChile.toString().padStart(2,'0')}:${targetMinuteChile.toString().padStart(2,'0')}`;
            if (targetDateForDisplay) { 
                reply = `¬°Ojo! üëÄ Parece que el ${new Intl.DateTimeFormat('es-CL', { weekday: 'long', day: 'numeric', month: 'long', timeZone: 'America/Santiago' }).format(targetDateForDisplay)} a las ${targetHourChile.toString().padStart(2,'0')}:${targetMinuteChile.toString().padStart(2,'0')}`;
            }
            reply += ` est√° fuera de nuestro horario de atenci√≥n (que es de 10:00 a 19:30). ¬øTe gustar√≠a buscar dentro de ese rango?`;
            console.log('‚úÖ Respuesta generada (fuera de horario):', reply);
            return res.status(200).json({ response: reply + scheduleFooterMessage });
        }
      }

      let calendarQueryStartUtc;
      if (targetDateForDisplay) { 
          calendarQueryStartUtc = new Date(targetDateForDisplay.getTime());
      } else { 
          calendarQueryStartUtc = new Date(refDateForTargetCalc.getTime()); 
      }
      
      const calendarQueryEndUtc = new Date(calendarQueryStartUtc);
      calendarQueryEndUtc.setUTCDate(calendarQueryStartUtc.getUTCDate() + DAYS_TO_QUERY_CALENDAR); 
      
      console.log(`üóìÔ∏è Google Calendar Query: De ${calendarQueryStartUtc.toISOString()} a ${calendarQueryEndUtc.toISOString()}`);

      const googleResponse = await calendar.events.list({
        calendarId: 'primary',
        timeMin: calendarQueryStartUtc.toISOString(),
        timeMax: calendarQueryEndUtc.toISOString(),
        singleEvents: true,
        orderBy: 'startTime'
      });

      const busySlots = googleResponse.data.items
        .filter(e => e.status !== 'cancelled')
        .map(e => {
          if (e.start?.dateTime && e.end?.dateTime) {
            return { start: new Date(e.start.dateTime).getTime(), end: new Date(e.end.dateTime).getTime() };
          } else if (e.start?.date && e.end?.date) {
            const startDateAllDayUtc = new Date(e.start.date);
            const endDateAllDayUtc = new Date(e.end.date);
            return { start: startDateAllDayUtc.getTime(), end: endDateAllDayUtc.getTime() };
          }
          return null;
        }).filter(Boolean);
      console.log(`Found ${busySlots.length} busy slots from Google Calendar.`);
      if (busySlots.length > 0) {
        console.log("DEBUG: Contenido de busySlots (eventos UTC de Google Calendar):");
        busySlots.forEach((bs, index) => {
          const eventStartDate = new Date(bs.start);
          const eventEndDate = new Date(bs.end);
          if (eventEndDate > calendarQueryStartUtc && eventStartDate < calendarQueryEndUtc) {
            console.log(`  BusySlot ${index}: Start: ${eventStartDate.toISOString()}, End: ${eventEndDate.toISOString()}`);
          }
        });
      }

      const WORKING_HOURS_CHILE_STR = [
        '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '13:30',
        '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30',
        '18:00', '18:30', '19:00', '19:30'
      ];
      const availableSlotsOutput = [];
      const processedDaysForGenericQuery = new Set(); 
      
      let baseIterationDateDayUtcStart;
      if (targetDateForDisplay) {
          baseIterationDateDayUtcStart = new Date(targetDateForDisplay);
      } else { 
          baseIterationDateDayUtcStart = new Date(refDateForTargetCalc);
      }

      for (let i = 0; i < DAYS_TO_QUERY_CALENDAR; i++) { 
        const currentDayProcessingUtcStart = new Date(baseIterationDateDayUtcStart);
        currentDayProcessingUtcStart.setUTCDate(baseIterationDateDayUtcStart.getUTCDate() + i);
        
        for (const timeChileStr of WORKING_HOURS_CHILE_STR) {
          const [hChile, mChile] = timeChileStr.split(':').map(Number);

          if (targetHourChile !== null) {
            if (hChile !== targetHourChile || mChile !== targetMinuteChile) continue;
          } else if (timeOfDay && !(isAnyNextWeekIndicator && !targetDateIdentifierForSlotFilter && !isProximoQuery) ) { 
            if (timeOfDay === 'morning' && (hChile < 10 || hChile >= 14)) continue;
            if (timeOfDay === 'afternoon' && (hChile < 14 || hChile > 19 || (hChile === 19 && mChile > 30))) continue;
          }

          const slotStartUtc = convertChileTimeToUtc(currentDayProcessingUtcStart, hChile, mChile);
          if (isNaN(slotStartUtc.getTime())) { console.error("Slot UTC inv√°lido:", currentDayProcessingUtcStart, hChile, mChile); continue; }
          
          const slightlyFutureServerNowUtc = new Date(serverNowUtc.getTime() + 5 * 60 * 1000);
          if (slotStartUtc < slightlyFutureServerNowUtc) continue;

          const slotDayIdentifierInChile = getDayIdentifier(slotStartUtc, 'America/Santiago');

          if (targetDateIdentifierForSlotFilter) {
            if (slotDayIdentifierInChile !== targetDateIdentifierForSlotFilter) {
              continue; 
            }
          }

          const slotEndUtc = new Date(slotStartUtc);
          slotEndUtc.setUTCMinutes(slotEndUtc.getUTCMinutes() + 30);
          const isBusy = busySlots.some(busy => slotStartUtc.getTime() < busy.end && slotEndUtc.getTime() > busy.start);
          
          if (!isBusy) { 
            const formattedSlot = new Intl.DateTimeFormat('es-CL', {
                weekday: 'long', day: 'numeric', month: 'long',
                hour: '2-digit', minute: '2-digit', timeZone: 'America/Santiago'
            }).format(slotStartUtc);
            
            if (!targetDateIdentifierForSlotFilter && !targetHourChile) { 
                if (availableSlotsOutput.length < 10) { 
                    if (!processedDaysForGenericQuery.has(slotDayIdentifierInChile) || availableSlotsOutput.length < 2) {
                         availableSlotsOutput.push(formattedSlot);
                         processedDaysForGenericQuery.add(slotDayIdentifierInChile);
                    } else if (Array.from(processedDaysForGenericQuery).length < 3 && availableSlotsOutput.filter(s => s.startsWith(new Intl.DateTimeFormat('es-CL', {weekday: 'long', timeZone: 'America/Santiago'}).format(slotStartUtc))).length < 2) {
                         availableSlotsOutput.push(formattedSlot);
                    }
                }
            } else { 
                 availableSlotsOutput.push(formattedSlot);
            }
          }
        }
        if (targetDateIdentifierForSlotFilter && getDayIdentifier(currentDayProcessingUtcStart, 'America/Santiago') === targetDateIdentifierForSlotFilter) {
            if (targetHourChile !== null || availableSlotsOutput.length >= MAX_SUGGESTIONS ) break; 
        }
        if (availableSlotsOutput.length >= MAX_SUGGESTIONS && !targetDateIdentifierForSlotFilter && !targetHourChile && processedDaysForGenericQuery.size >=2) break; 
      }
      
      if(targetDateIdentifierForSlotFilter) {
          console.log(`üîé Slots encontrados para el d√≠a de Chile ${targetDateIdentifierForSlotFilter}: ${availableSlotsOutput.length}`);
      } else {
          console.log(`üîé Slots encontrados en b√∫squeda general (pr√≥ximos ${DAYS_TO_QUERY_CALENDAR} d√≠as): ${availableSlotsOutput.length}`);
      }
      
      let reply = '';

      if (targetHourChile !== null) { 
        if (availableSlotsOutput.length > 0) {
          reply = `¬°Excelente! üéâ Justo el ${availableSlotsOutput[0]} est√° libre para ti. ¬°Qu√© buena suerte! Para asegurar tu cita, cont√°ctanos directamente y la reservamos. üòâ`;
        } else {
          let specificTimeQuery = "";
          if(targetDateForDisplay) specificTimeQuery += `${new Intl.DateTimeFormat('es-CL', { weekday: 'long', day: 'numeric', month: 'long', timeZone: 'America/Santiago' }).format(targetDateForDisplay)} `;
          specificTimeQuery += `a las ${targetHourChile.toString().padStart(2,'0')}:${targetMinuteChile.toString().padStart(2,'0')}`;
          reply = `¬°Uy! Justo ${specificTimeQuery} no me quedan espacios. üòï ¬øTe gustar√≠a que revise otro horario o quiz√°s otro d√≠a?`;
        }
      } else if (availableSlotsOutput.length > 0) { 
        let intro = `¬°Buenas noticias! üéâ Encontr√© estas horitas disponibles`;
        if (targetDateForDisplay) {
            intro += ` para el ${new Intl.DateTimeFormat('es-CL', { weekday: 'long', day: 'numeric', month: 'long', timeZone: 'America/Santiago' }).format(targetDateForDisplay)}`;
        } else if (isAnyNextWeekIndicator) { 
            intro += ` para la pr√≥xima semana`;
        } else { 
             intro += ` en los pr√≥ximos d√≠as`;
        }
        if (timeOfDay === 'morning') intro += ' por la ma√±ana';
        if (timeOfDay === 'afternoon') intro += ' por la tarde';
        intro += '. ¬°A ver si alguna te acomoda! ü•≥:';

        let finalSuggestions = [];
        if (!targetDateIdentifierForSlotFilter && !targetHourChile) { 
            const slotsByDay = {};
            for (const slot of availableSlotsOutput) {
                const dayName = slot.split(',')[0]; 
                if (!slotsByDay[dayName]) slotsByDay[dayName] = [];
                if (slotsByDay[dayName].length < 2) { 
                    slotsByDay[dayName].push(slot);
                }
            }
            let count = 0;
            for (const day in slotsByDay) { 
                for(const slot of slotsByDay[day]){
                    if(count < MAX_SUGGESTIONS){
                        finalSuggestions.push(slot);
                        count++;
                    } else { break; }
                }
                if (count >= MAX_SUGGESTIONS) break; 
            }
        } else { 
            finalSuggestions = availableSlotsOutput.slice(0, MAX_SUGGESTIONS);
        }

        reply = `${intro}\n- ${finalSuggestions.join('\n- ')}`;
        
        if (availableSlotsOutput.length > finalSuggestions.length && finalSuggestions.length > 0) { 
           const remaining = availableSlotsOutput.length - finalSuggestions.length;
           if (remaining > 0) {
             reply += `\n\n(Y ${remaining} m√°s... ¬°para que tengas de d√≥nde elegir! üòâ)`;
           }
        }
      } else { 
        reply = '¬°Pucha! üòî Parece que no tengo horas libres';
        if (targetDateForDisplay) {
            reply += ` para el ${new Intl.DateTimeFormat('es-CL', { weekday: 'long', day: 'numeric', month: 'long', timeZone: 'America/Santiago' }).format(targetDateForDisplay)}`;
        } else if (isAnyNextWeekIndicator) {
            reply += ` para la pr√≥xima semana`;
        }
        if (timeOfDay === 'morning') reply += ' por la ma√±ana';
        if (timeOfDay === 'afternoon') reply += ' por la tarde';
        if (targetHourChile !== null && !targetDateForDisplay && !isAnyNextWeekIndicator) reply += ` a las ${targetHourChile.toString().padStart(2,'0')}:${targetMinuteChile.toString().padStart(2,'0')}`
        
        if (targetDateForDisplay || timeOfDay || targetHourChile || isAnyNextWeekIndicator) {
             reply += '.';
        } else { 
            reply += ` dentro de los pr√≥ximos ${DAYS_TO_QUERY_CALENDAR} d√≠as.`;
        }
        reply += ' ¬øTe animas a que busquemos en otra fecha u horario? ¬°Seguro encontramos algo! üëç';
      }
      
      reply += scheduleFooterMessage; 

      console.log('‚úÖ Respuesta generada:', reply);
      return res.status(200).json({ response: reply });
      // FIN DE LA L√ìGICA DE CALENDARIO
    } 

    // --- Si no es consulta de calendario, usar OpenAI ---
    console.log('üí° Consulta normal, usando OpenAI');
    const systemPrompt = process.env.RIGBOT_PROMPT || 
`Eres Rigbot, el asistente virtual de la consulta quiropr√°ctica Rigquiropr√°ctico, atendido por el quiropr√°ctico Roberto Ibacache en Copiap√≥, Chile.
Tu rol es entregar informaci√≥n clara, profesional, c√°lida y emp√°tica a quienes consultan por servicios quiropr√°cticos, y sugerir horarios disponibles usando el calendario conectado.

No agendas directamente, no recopilas datos personales ni confirmas pagos.
Nunca inventes informaci√≥n. Solo responde con lo que indican estas instrucciones.
Siempre invita al paciente a escribir directamente al WhatsApp üëâ +56 9 8996 7350 para continuar el proceso con un humano.

FUNCIONES PRINCIPALES
- Si el usuario pregunta por disponibilidad general o para un d√≠a/semana/mes espec√≠fico, consulta los horarios usando la l√≥gica de calendario interna.
- Si se encuentran horarios, sugiere hasta 3-5 horarios concretos. Si el usuario pidi√≥ un d√≠a/franja espec√≠fica, enf√≥cate en eso.
- Si el usuario pide una hora espec√≠fica y est√° disponible, conf√≠rmala.
- Si el usuario pide una hora espec√≠fica y NO est√° disponible, informa que no est√° e idealmente sugiere alternativas cercanas SI LAS HAY para ESE MISMO D√çA. Si no hay alternativas ese d√≠a para esa hora, simplemente informa que no est√° disponible para esa hora y d√≠a.
- Si no se encuentran horarios para la consulta espec√≠fica, informa claramente que no hay disponibilidad para esos criterios.
- Siempre finaliza las consultas de horario (encuentres o no) con: "Recuerda que puedo revisar horarios para los pr√≥ximos 7 d√≠as aproximadamente. Para fechas m√°s lejanas o cualquier otra duda, ¬°escr√≠benos por WhatsApp al üëâ +56 9 8996 7350 y te ayudamos con m√°s detalle! üòä". No ofrezcas buscar otros horarios t√∫ mismo a menos que el usuario lo pida.

INFORMACI√ìN IMPORTANTE
PRECIOS
1 sesi√≥n: $40.000
Pack 2 sesiones: $70.000
Pack 3 sesiones: $100.000
Pack 5 sesiones: $160.000
Pack 10 sesiones: $300.000
Los packs pueden ser compartidos entre personas distintas si se pagan en un solo abono.

DIRECCI√ìN
Atendemos en Copiap√≥, en el Centro de Salud Fleming, Van Buren 129.
Si quieres m√°s informaci√≥n o agendar, escribe directamente al WhatsApp üëâ +56 9 8996 7350

¬øQU√â ES LA QUIROPRAXIA?
Si el paciente lo pregunta, comparte este video:
https://youtu.be/EdEZyZUDAw0 (Nota: Este enlace es un placeholder, reempl√°zalo por el real si existe)

ESTILO DE COMUNICACI√ìN
Usa un estilo conversacional c√°lido, informal pero profesional. 
No repitas siempre la misma estructura. Var√≠a tus respuestas. 
Si un usuario es simp√°tico o usa humor, puedes ser un poco m√°s cercano. 
Nunca seas fr√≠o ni rob√≥tico. Siempre busca generar una experiencia amable y humana.

Usa siempre un lenguaje amable, claro, emp√°tico, c√°lido y confiable.
Eres un asistente experto y servicial, pero nunca fr√≠o ni rob√≥tico.`;

    const chatResponse = await openai.chat.completions.create({
      model: MODEL,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: message }
      ]
    });

    const gptReply = chatResponse.choices[0].message.content.trim();
    return res.status(200).json({ response: gptReply });

  } catch (error) {
    console.error('‚ùå Error en Rigbot:', error);
    console.error(error.stack);
    return res.status(500).json({ error: 'Ocurri√≥ un error en Rigbot. ' + error.message });
  }
}